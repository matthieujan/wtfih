interface SignalReceiveIt(int from,int say){
    handle[from][say];
}

interface MotorControlIt{
    ascent;
    stop;
    descent;
}

interface DoorControlIt{
    open;
    close;
}

component CONTROLCENTER(int N) {
    require
        door:DoorControlIt;
        motor:MotorControlIt;
    provide
        cc:SignalReceiveIt(1,2);
    /%
        const SCB = 1
        const STOP = 2
        const SCH = 3

        const Cage = 4
        const Blocked = 4
        range All = 1..4
        range Floors = 1..3
        const Max = 3
        const Call = 4

        CONTROLCENTER(N=1) = CTRL[1][1],
        CTRL[from:1..N][to:1..N] =
        (
            cc.handle[i:Floors][Call] ->
            (when(from == to & from == i) door.open -> CTRL[from][to]
            |when(from == to & from > i) door.close -> motor.descent -> CTRL[from][i]
            |when(from == to & from < i) door.close -> motor.ascent -> CTRL[from][i]
            |when(from != to) ignore -> CTRL[from][to]
            )
            |cc.handle[Cage][i:Floors] ->
            (when (from != to) ignore -> CTRL[from][to]
            |when(from == to & from == i) door.open -> CTRL[from][to]
            |when(from == to & from > i) door.close -> motor.descent -> CTRL[from][i]
            |when(from == to & from < i) door.close -> motor.ascent -> CTRL[from][i]
            )
            |cc.handle[Cage][Blocked] ->
            (when(from == to) door.open -> CTRL[from][to]
            |when(from != to) ignore -> CTRL[from][to]
            )
            |cc.handle[1][SCB] -> CTRL[0][0]
            |cc.handle[Max][SCH] -> CTRL[0][0]
            |cc.handle[i:Floors][STOP] ->
            (when(from == to & i == from) ignore -> CTRL[from][to]
            |when(from == to & i != from) alert -> CTRL[0][0]
            |when(from > to & i > from | i < to ) alert -> CTRL[0][0]
            |when(from < to & i < from | i > to ) alert -> CTRL[0][0]
            |when(from > to & i <= from & i > to) ignore -> CTRL[from][to]
            |when(from < to & i >= from & i < to) ignore -> CTRL[from][to]
            |when(from != to & i == to) motor.stop -> door.open -> CTRL[to][to]
            )
            |cc.handle[i:2..Max][SCB] ->
            (when(from == to) alert -> CTRL[0][0]
            |when(from < to & i == to) motor.ascent -> CTRL[from][to]
            |when(from < to & i != to) ignore -> CTRL[from][to]
            |when(from > to) ignore -> CTRL[from][to]
            )
            |cc.handle[i:1..Max-1][SCH] ->
            (when(from == to) alert -> CTRL[0][0]
            |when(from > to & i == to) motor.descent -> CTRL[from][to]
            |when(from > to & i != to) ignore -> CTRL[from][to]
            |when(from < to) ignore -> CTRL[from][to]
            )
            |when(from == 0 & to == 0) motor.stop -> CTRL[0][0]
        )+{door.DoorControlIt,motor.MotorControlIt,cc.SignalReceiveIt}.
    %/
}

component ELEVATORCAGE (int NBFLOOR){
    require
        cc:SignalReceiveIt(1,2);
    provide
        door:DoorControlIt;

        /%
            ELEVATORCAGE(NBFLOOR = 1) = EC[NBFLOOR],
            EC[NBFLOOR] = (
                cc.handle[NBFLOOR+1][1..NBFLOOR+1] -> EC[NBFLOOR]
                | door.open -> EC[NBFLOOR]
                | door.close -> EC[NBFLOOR]
            )+{door.DoorControlIt,cc.SignalReceiveIt}.

        %/
}

component FLOOR(int NUMFLOOR) {
    require
        cc:SignalReceiveIt(1,2);
        /%
            range SIGNALS = 1..4

            FLOOR(NUMFLOOR=1) = FLO[NUMFLOOR],
            FLO[i:NUMFLOOR..NUMFLOOR] = (
                cc.handle[i][SIGNALS] -> FLO[i]
            )+{cc.SignalReceiveIt}.
        %/
}

component MOTOR {
    provide
        motor:MotorControlIt;
        /%
            MOTOR = (
                motor.ascent -> motor.ascent -> motor.stop -> MOTOR
               |motor.descent -> motor.descent -> motor.stop -> MOTOR
            ).
        %/
}

component GLOBAL {
    inst
        cc:CONTROLCENTER(3);
        cage:ELEVATORCAGE(3);
        motor:MOTOR;
        floor1:FLOOR(1)/{gotoFloor1/handle[4][1]};
        floor2:FLOOR(2);
        floor3:FLOOR(3);
    bind
        floor1.cc -- cc.cc;
        floor2.cc -- cc.cc;
        floor3.cc -- cc.cc;
        cc.motor -- motor.motor;
        cc.door -- cage.door;
        cage.cc -- cc.cc;
}
