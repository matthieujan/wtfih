//Interface de controle du moteur
interface MotorControlIt{
    ascent; //Monter
    stop; //Arreter
    descent; //Descendre
}

//Description du composant moteur
component MOTOR {
    provide
        motor:MotorControlIt; //Fourni une interface de controle du moteur
        /%
            //Processus simple obligeant le moteur à s'arrêter avant de changer de direction
            MOTOR = (
                motor.ascent -> motor.stop -> MOTOR
               |motor.descent -> motor.stop -> MOTOR
            )+{motor.MotorControlIt}.
        %/
}

//Interface de controle de la porte
interface DoorControlIt{
    open; //Ouvrir
    close; //Fermer
}

component DOOR{
    provide
        door:DoorControlIt;
        /%
            DOOR= (
                door.open -> DOOR
               |door.close -> DOOR 
            )+{door.DoorControlIt}.
        %/
}



//Interface d'emission d'evenement en provenance d'un bouton
interface ButtonIt{
    bip;
}

component BUTTON{
    provide
        button:ButtonIt;
    /%
        BUTTON = (button.bip -> BUTTON)+{button.ButtonIt}.
    %/
}

//Interface d'emission d'un message en provenance d'un capteur
interface CaptorIt{
    on;
    off;
}

component CAPTOR{
    provide
        captor:CaptorIt;

        /%
            CAPTOR= (
                captor.on -> captor.off -> CAPTOR
            )+{captor.CaptorIt}.
        %/
}

//Inteface d'emission d'evenement en provenance d'un etage
interface FloorEventIt{
    captorHautOn; //Allumage du capteur de surcourse haut
    captorHautOff; //Extinction du capteur de surcourse haut
    captorBasOn; //Allumage du capteur de surcourse bas
    captorBasOff; //Extinction du capteur de surcourse bas
    captorStopOn; //Allumage du capteur d'arret
    captorStopOff; //Extinction du capteur d'arret
    callTo; //Appel vers cet etage
}

component FLOOR{
    require
        ch:CaptorIt;
        cb:CaptorIt;
        st:CaptorIt;
        bt:ButtonIt;
    provide
        sig:FloorEventIt;
    /%
        FLOORCAPTORS = (
            cb.on -> (st.on -> cb.off -> FLOORCAPTORS | st.off -> cb.off -> FLOORCAPTORS)
           |ch.on -> (st.on -> ch.off -> FLOORCAPTORS | st.off -> ch.off -> FLOORCAPTORS)
           )+{ch.CaptorIt,cb.CaptorIt,st.CaptorIt}.

        FLOORBUTTON = (
            bt.bip -> FLOORBUTTON
            )+{bt.ButtonIt}.

        FLOORTRANSMIT = (
            bt.bip -> sig.callTo -> FLOORTRANSMIT
           |ch.on -> sig.captorHautOn -> FLOORTRANSMIT
           |ch.off -> sig.captorHautOff -> FLOORTRANSMIT
           |cb.on -> sig.captorBasOn -> FLOORTRANSMIT
           |cb.off -> sig.captorBasOff -> FLOORTRANSMIT
           |st.on -> sig.captorStopOn -> FLOORTRANSMIT
           |st.off -> sig.captorStopOff -> FLOORTRANSMIT).

        ||FLOOR = (FLOORCAPTORS || FLOORBUTTON || FLOORTRANSMIT).
    %/
}

//Interface d'emission d'evenement en provenance de la cage d'ascenseur
interface CageEventIt{
    gotoFloorOne;
    gotoFloorTwo;
    gotoFloorThree;
}

component CAGE {
    require
        btTo1:ButtonIt;
        btTo2:ButtonIt;
        btTo3:ButtonIt;
    provide
        sig:CageEventIt;

        /%
            CAGE = (btTo1.bip -> sig.gotoFloorOne -> CAGE | btTo2.bip -> sig.gotoFloorTwo -> CAGE | btTo3.bip -> sig.gotoFloorThree -> CAGE)
            +{btTo1.ButtonIt,btTo2.ButtonIt,btTo3.ButtonIt,sig.CageEventIt}.
        %/
}

component CONTROLCENTER{
    require
        floor1:FloorEventIt;
        floor2:FloorEventIt;
        floor3:FloorEventIt;
        cage:CageEventIt;
        door:DoorControlIt;
        motor:MotorControlIt;

    /%
        CONTROLCENTER = (
            floor1.sig.captorBasOn -> floor1.sig.captorStopOn -> floor1.sig.captorBasOff -> CC
        ).

        CCMOVE1 = (
            floor1.sig.captorHautOn -> floor2.sig.captorBasOn -> CCMOVE2
        ).
        CCMOVE2 = (
            floor2.sig.captorBasOn -> floor1.sig.captorHautOn -> CCMOVE1
           |floor2.sig.captorHautOn -> floor3.sig.captorBasOn -> CCMOVE3
        ).
        CCMOVE3 = (
           floor3.sig.captorBasOn -> floor2.sig.captorHautOn -> CCMOVE2
        ).

        ||CC = (CCMOVE1 ||).
    %/
}

component GLOBAL {
    inst
        //FLOOR1
        floor1:FLOOR;
        ch1:CAPTOR;
        cb1:CAPTOR;
        st1:CAPTOR;
        bt1:BUTTON;

        //FLOOR2
        floor2:FLOOR;
        ch2:CAPTOR;
        cb2:CAPTOR;
        st2:CAPTOR;
        bt2:BUTTON;
        
        //FLOOR3
        floor3:FLOOR;
        ch3:CAPTOR;
        cb3:CAPTOR;
        st3:CAPTOR;
        bt3:BUTTON;
        
        //CAGE
        btCage1:BUTTON;
        btCage2:BUTTON;
        btCage3:BUTTON;
        cage:CAGE;

        //CONTROLCENTER
        motor:MOTOR;
        door:DOOR;
        cc:CONTROLCENTER;

    bind
        //FLOOR 1 BINDING
        floor1.ch -- ch1.captor;
        floor1.cb -- cb1.captor;
        floor1.st -- st1.captor;
        floor1.bt -- bt1.button;

        //FLOOR 2 BINDING
        floor2.ch -- ch2.captor;
        floor2.cb -- cb2.captor;
        floor2.st -- st2.captor;
        floor2.bt -- bt2.button;

        //FLOOR 1 BINDING
        floor3.ch -- ch3.captor;
        floor3.cb -- cb3.captor;
        floor3.st -- st3.captor;
        floor3.bt -- bt3.button;

        //CAGE BINDING
        cage.btTo1 -- btCage1.button;
        cage.btTo2 -- btCage2.button;
        cage.btTo3 -- btCage3.button;

        //CONTROLCENTER BINDING
        cc.motor -- motor.motor;
        cc.door -- door.door;
        cc.floor1 -- floor1.sig;
        cc.floor2 -- floor2.sig;
        cc.floor3 -- floor3.sig;
        cc.cage -- cage.sig;
}
